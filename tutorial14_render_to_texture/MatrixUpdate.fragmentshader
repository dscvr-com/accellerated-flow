#version 330 core

in vec2 UV;

layout(location = 0) out vec3 colorA;
layout(location = 1) out vec2 colorB;

uniform sampler2D srcLeftA;
uniform sampler2D srcLeftB;
uniform sampler2D srcRightA;
uniform sampler2D srcRightB;
uniform sampler2D flow;

uniform float height;
uniform float width;
uniform float hs;
uniform float ws;

uniform bool fake;

void main() {
	int BORDER = 5;
	float border[5] = {0.14f, 0.14f, 0.4472f, 0.4472f, 0.4472f};

	vec2 d = texture(flow, UV).xy;

	float x1 = UV.x + d.x * ws;
	float y1 = UV.y + d.y * hs;
    //float x1 = UV.x + d.x;
	//float y1 = UV.y + d.y;

	float r2;
	float r3;
	float r4;
	float r5;
	float r6;

	vec3 leftPointA = texture(srcLeftA, UV).xyz;
	vec2 leftPointB = texture(srcLeftB, UV).xy;

	vec3 rightPointA = texture(srcRightA, vec2(x1, y1)).xyz;
	vec2 rightPointB = texture(srcRightB, vec2(x1, y1)).xy;
	
	r2 = (leftPointA.x - rightPointA.x) * 0.5f;
	r3 = (leftPointA.y - rightPointA.y) * 0.5f;
	r4 = (leftPointA.z + rightPointA.z) * 0.5f;
	r5 = (leftPointB.x + rightPointB.x) * 0.5f;
	r6 = (leftPointB.y + rightPointB.y) * 0.25f;

	r2 += r4 * d.y + r6 * d.x;
	r3 += r6 * d.y + r5 * d.x;

	float scale = 1.f;

	/*int scaledX = int(x * width);
	if (scaledX < BORDER) {
        scale *= border[scaledX];
    } else if (scaledX >= width - BORDER) {
        scale *= border[int(width) - scaledX - 1];
    }

	int scaledY = int(y * height);
    if (scaledY < BORDER) {
        scale *= border[scaledY];
    } else if (scaledY >= height - BORDER) {
        scale *= border[int(height) - scaledY - 1];
    }*/

    /*if (scale != 1.f) {
        r2 *= scale; 
        r3 *= scale; 
        r4 *= scale;
        r5 *= scale; 
        r6 *= scale;
    }*/

	float r6q = r6 * r6;

	float out1 = r4 * r4 + r6q;
	float out2 = (r4 + r5) * r6;
	float out3 = r5 * r5 + r6q;
	float out4 = r4 * r2 + r6 * r3;
	float out5 = r6 * r2 + r5 * r3;
	
	float use = abs(out1) * 500;
	//colorA = vec3(use, use, use);
	//colorB = vec3(abs(out1) * 1000, abs(out2) * 1000, abs(out3) * 1000);

	colorA = vec3(out1, out2, out3);
    colorB = vec2(out4, out5);

    if (fake) {
        colorB = d;
    }

    //colorA = vec3(r2, r3, r4);
    //colorB = vec2(r5, r6);
}